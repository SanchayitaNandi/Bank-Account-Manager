# -*- coding: utf-8 -*-
"""Mini Project (12 Hours Drill).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12EPp7qXgEMxuHQhvsvvdShhJzK5eGuYe
"""

from abc import ABC, abstractmethod

class Account(ABC):
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = float(balance)

    @abstractmethod
    def withdraw(self, amount):
        pass

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited ₹{amount:.2f}.\nNew balance: ₹{self.balance:.2f}")

    def get_balance(self):
        print(f"Current Balance: {self.balance:.2f}")


class CheckingAccount(Account):
    def __init__(self, account_number, balance):
        super().__init__(account_number, balance)

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            print(f"Withdrew ₹{amount:.2f} from Checking Account.\nNew balance: ₹{self.balance:.2f}")
        else:
            print("Insufficient funds")


class SavingsAccount(Account):
    def __init__(self, account_number, balance):
        super().__init__(account_number, balance)

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            print(f"Withdrew ₹{amount:.2f} from Savings Account.\nNew balance: ₹{self.balance:.2f}")
        else:
            print("Insufficient funds")


class BusinessAccount(Account):
    def __init__(self, account_number, balance):
        super().__init__(account_number, balance)

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            print(f"Withdrew ₹{amount:.2f} from Business Account.\nNew balance: ₹{self.balance:.2f}")
        else:
            print("Insufficient funds")

class AccountHolder:
    def __init__(self, name, pin):
        self.name = name
        self.pin = pin
        self.account = {'C': [], 'S': [], 'B': []}

    def open_checking_account(self, account_number, balance):
        self.account['C'].append(CheckingAccount(account_number, balance))

    def open_savings_account(self, account_number, balance):
        self.account['S'].append(SavingsAccount(account_number, balance))

    def open_business_account(self, account_number, balance):
        self.account['B'].append(BusinessAccount(account_number, balance))

def create_account():
    for acc in range(100501, 1800000):
        yield acc

def check_credentials(AccHolder_list, name, pin):
    for AccHolder in AccHolder_list:
        if AccHolder.name == name and AccHolder.pin == pin:
            return AccHolder

def make_deposit(AccHolder_list, account_type, account_number, dep_amt):
    for AccHolder in AccHolder_list:
        for account in AccHolder.account[account_type]:
            if account.account_number == account_number:
                account.deposit(dep_amt)

def make_withdrawl(AccHolder_list, account_type, account_number, with_amt):
    for AccHolder in AccHolder_list:
        for account in AccHolder.account[account_type]:
            if account.account_number == account_number:
                account.withdraw(with_amt)

def get_bal(AccHolder_list, account_type, account_number):
  for AccHolder in AccHolder_list:
    for account in AccHolder.account[account_type]:
      if account.account_number == account_number:
        account.get_balance()
      return True
  return False

def main():
  acc_no = create_account()
  acc_hldr_list = []
  print("\nWelcome To EDYODA Bank!!!\n")
  option = int(input("Please select service:\n1. Banking\n2. ATM\n3. Exit\n"))
  if option not in (1, 2, 3):
    print("Invalid Input. Please try again.\n")
  elif option == 3:
    print("Thank You For Visiting EDYODA Bank.\n")
    return

  while True and option == 1:
    option1 = int(input("Please select service:\n1. Open Account\n2. Exit bank\n"))
    if option1 not in (1, 2):
      print("Invalid Input. Please try again.\n")
      continue
    elif option1 == 2:
      break

    if option1 == 1:
      exist_customer = int(input("Are you an existing Account Holder?\n1. Yes\n2. No\n"))
      if exist_customer not in (1, 2):
        print("Invalid Input. Please try again.\n")
        continue

      try:
        name = input("Enter Full Name:")
        acc_type = str(input("Please enter type of account:\nChecking: 'C'\nSavings: 'S'\nBusiness: 'B'\n")).upper()
      except TypeError:
        print("Invalid Input. Please try again.\n")
        continue

      if exist_customer == 2:
        acc_nbr = next(acc_no)
        pin = int(input("Please enter a 4-digit pin:\n"))
        dep_bal = int(input("Please enter the Opening Balance:\n"))
        acc_hldr = AccountHolder(name, pin)
        if acc_type == 'C':
          acc_hldr.open_checking_account(acc_nbr, dep_bal)
          acc_hldr_list.append(acc_hldr)
        elif acc_type == 'S':
          acc_hldr.open_savings_account(acc_nbr, dep_bal)
          acc_hldr_list.append(acc_hldr)
        elif acc_type == 'B':
          acc_hldr.open_business_account(acc_nbr, dep_bal)
          acc_hldr_list.append(acc_hldr)
        print("Congratulations on opening your account", name,"\n")
        print("Your Account Number is: ", acc_nbr, "\n")

      if exist_customer == 1:
        pin = int(input("Please enter a 4-digit pin:\n"))
        try:
          acc_hldr = check_credentials(acc_hldr_list, name, pin)
        except Exception:
          continue
        if acc_hldr:
          print("Welcome to your EDYODA Bank Account", name, "\n")
          get_bal(acc_hldr_list, acc_type, acc_nbr)
          print("\n"*2)
        else:
          print("Account not Found")
  while True:
    option2 = int(input("\nPlease select service:\n1. Withdraw money from Account\n2. Deposit money to account\n3. Exit\n"))
    if option2 not in (1, 2, 3):
      print("Invalid Input. Please try again.")
      continue
    elif option2 == 3:
      return

    try:
      name = input("Enter Full Name:")
      acc_nbr = int(input("Enter your Account Number: "))
      acc_type = str(input("Please enter type of account:\nChecking: 'C'\nSavings: 'S'\nBusiness: 'B'\n")).upper()
      pin = int(input("Enter your PIN: "))
    except TypeError:
      print("Invalid Input. Please try again.\n")
      continue

    try:
      acc_hldr = check_credentials(acc_hldr_list, name, pin)
    except Exception:
      print("Account not found. Please enter valid credentials.\n")
      continue
    else:
      if option2 == 1:
        with_amt = int(input("Enter Withdrawl Amount: "))
        make_withdrawl(acc_hldr_list, acc_type, acc_nbr, with_amt)

      if option2 == 2:
        dep_amt = int(input("Enter Deposit Amount: "))
        make_deposit(acc_hldr_list, acc_type, acc_nbr, dep_amt)

if __name__ == '__main__':
    main()



